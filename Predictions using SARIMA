import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
#import pmdarima as pm
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import acf ,pacf
#from pmdarima import auto_arima
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.statespace.sarimax import SARIMAX

file_path = r'poa_data_Irrr.csv'
data = pd.read_csv(file_path)

data['Date'] = pd.to_datetime(data['Date'], format='%d/%m/%Y')
data.set_index('Date', inplace=True)

data.info()
data.plot(figsize=(12,5))

temp = data['TempAir']
wind_speed = data['Wind_speed']
Ghi = data['Ghi']
dhi = data['dhi']
dni = data['dni']

split_date = data.index[-31]

data_train = data[data.index < split_date].copy()
data_test = data[data.index >= split_date].copy()

# Augmented Dickey-Fuller test
result = adfuller(temp_train)
print(f"ADF Statistic: {result[0]}")
print(f"p-value: {result[1]}")
if result[1] <= 0.05:
    print("Data is stationary (reject null hypothesis)")
else:
    print("Data is NOT stationary (fail to reject null hypothesis)")

temp_train_seasonal_diff = temp_train.diff(365).dropna()

# Check stationarity
result_seasonal_diff = adfuller(temp_train_seasonal_diff)
print(f"p-value after seasonal differencing: {result_seasonal_diff[1]}")

model = SARIMAX(temp_train ,
                order=(7, 1, 2),
                seasonal_order=(1, 1, 1, 31),
                enforce_stationarity=False,
                enforce_invertibility=False)

# Fit the model
sarima_result_temp = model.fit(disp=False, method='lbfgs')

# Print summary of the model
print(sarima_result.summary())

# Forecasting for the next 31 days
forecast_steps = 31
forecast = sarima_result_temp.get_forecast(steps=forecast_steps)

# Confidence intervals
forecast_index_temp = pd.date_range(start=temp_train.index[-1], periods=forecast_steps + 1, freq='D')[1:]
forecast_mean_temp = forecast.predicted_mean
forecast_conf_int_temp = forecast.conf_int()

# Plotting the results
plt.figure(figsize=(12,6))
plt.plot(temp_test, label='Observed', color='blue')
plt.plot(forecast_index_temp, forecast_mean_temp , label='Forecast', color='orange')
plt.fill_between(forecast_index_temp,
                 forecast_conf_int_temp.iloc[:, 0],
                 forecast_conf_int_temp.iloc[:, 1],
                 color='orange', alpha=0.3)
plt.title('31-Day Temperature Forecast')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.legend()
plt.show()
